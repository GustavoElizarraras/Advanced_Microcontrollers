
P1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000839  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a5  00000000  00000000  00000a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000308  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000022d  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a1 00 	jmp	0x142	; 0x142 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:



int main(void)
{
	DDRD = 0x00; // entradas
  80:	1a b8       	out	0x0a, r1	; 10
	DDRB = 0x00; // entradas	
  82:	14 b8       	out	0x04, r1	; 4
	DDRC = 0xFF; // salidas
  84:	8f ef       	ldi	r24, 0xFF	; 255
  86:	87 b9       	out	0x07, r24	; 7
	int ciclonei = 0b1000000;
	int x;	
    /* Replace with your application code */
    while (1) 
    {
		x = PIND;
  88:	89 b1       	in	r24, 0x09	; 9
  8a:	90 e0       	ldi	r25, 0x00	; 0
		if (PINB == 0b0000000) {
  8c:	23 b1       	in	r18, 0x03	; 3
  8e:	21 11       	cpse	r18, r1
  90:	17 c0       	rjmp	.+46     	; 0xc0 <main+0x40>
			PORTC = 0b1010101;
  92:	85 e5       	ldi	r24, 0x55	; 85
  94:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	4e e9       	ldi	r20, 0x9E	; 158
  9a:	54 e2       	ldi	r21, 0x24	; 36
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	40 40       	sbci	r20, 0x00	; 0
  a0:	50 40       	sbci	r21, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
			_delay_ms(750);
			PORTC = 0b0101010;
  a8:	8a e2       	ldi	r24, 0x2A	; 42
  aa:	88 b9       	out	0x08, r24	; 8
  ac:	6f ef       	ldi	r22, 0xFF	; 255
  ae:	8e e9       	ldi	r24, 0x9E	; 158
  b0:	94 e2       	ldi	r25, 0x24	; 36
  b2:	61 50       	subi	r22, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x32>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x3c>
  bc:	00 00       	nop
  be:	e4 cf       	rjmp	.-56     	; 0x88 <main+0x8>
			_delay_ms(750);
		} else if (PINB == 0b0000010) {
  c0:	23 b1       	in	r18, 0x03	; 3
  c2:	22 30       	cpi	r18, 0x02	; 2
  c4:	79 f4       	brne	.+30     	; 0xe4 <main+0x64>
			PORTC = x >> 2;		
  c6:	95 95       	asr	r25
  c8:	87 95       	ror	r24
  ca:	95 95       	asr	r25
  cc:	87 95       	ror	r24
  ce:	88 b9       	out	0x08, r24	; 8
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	40 e7       	ldi	r20, 0x70	; 112
  d4:	52 e0       	ldi	r21, 0x02	; 2
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	40 40       	sbci	r20, 0x00	; 0
  da:	50 40       	sbci	r21, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x56>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x60>
  e0:	00 00       	nop
  e2:	d2 cf       	rjmp	.-92     	; 0x88 <main+0x8>
			_delay_ms(50);
		} else if (PINB == 0b0000001) { 
  e4:	83 b1       	in	r24, 0x03	; 3
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	79 f6       	brne	.-98     	; 0x88 <main+0x8>
  ea:	0e c0       	rjmp	.+28     	; 0x108 <main+0x88>
			// Ciclone Eyes derecha

				for (int i = 1; i <= 8; i++) {
					PORTC = cicloned;
  ec:	28 b9       	out	0x08, r18	; 8
					cicloned = cicloned << 1;
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	6f ef       	ldi	r22, 0xFF	; 255
  f4:	41 ee       	ldi	r20, 0xE1	; 225
  f6:	54 e0       	ldi	r21, 0x04	; 4
  f8:	61 50       	subi	r22, 0x01	; 1
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	50 40       	sbci	r21, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x78>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x82>
 102:	00 00       	nop
			PORTC = x >> 2;		
			_delay_ms(50);
		} else if (PINB == 0b0000001) { 
			// Ciclone Eyes derecha

				for (int i = 1; i <= 8; i++) {
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	04 c0       	rjmp	.+8      	; 0x110 <main+0x90>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	89 30       	cpi	r24, 0x09	; 9
 112:	91 05       	cpc	r25, r1
 114:	5c f3       	brlt	.-42     	; 0xec <main+0x6c>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	0d c0       	rjmp	.+26     	; 0x13a <main+0xba>
					cicloned = cicloned << 1;
					_delay_ms(100);
				}
				cicloned = 0b0000001;					
				for (int i = 1; i <= 8; i++) {
					PORTC = ciclonei;
 120:	28 b9       	out	0x08, r18	; 8
					ciclonei = ciclonei >> 1;
 122:	35 95       	asr	r19
 124:	27 95       	ror	r18
 126:	6f ef       	ldi	r22, 0xFF	; 255
 128:	41 ee       	ldi	r20, 0xE1	; 225
 12a:	54 e0       	ldi	r21, 0x04	; 4
 12c:	61 50       	subi	r22, 0x01	; 1
 12e:	40 40       	sbci	r20, 0x00	; 0
 130:	50 40       	sbci	r21, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0xac>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0xb6>
 136:	00 00       	nop
					PORTC = cicloned;
					cicloned = cicloned << 1;
					_delay_ms(100);
				}
				cicloned = 0b0000001;					
				for (int i = 1; i <= 8; i++) {
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	89 30       	cpi	r24, 0x09	; 9
 13c:	91 05       	cpc	r25, r1
 13e:	84 f3       	brlt	.-32     	; 0x120 <main+0xa0>
 140:	a3 cf       	rjmp	.-186    	; 0x88 <main+0x8>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
