
eeprom.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000020e  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000020f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00000280  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000990  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006e2  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000452  00000000  00000000  00001352  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000024  00000000  00000000  000017a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003cd  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000013a  00000000  00000000  00001b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000010  00000000  00000000  00001ccf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
uint8_t EEMEM direccion; // Reserva una localidad de memoria llamada direccion
uint8_t dato;
int main(void) { 
	short int indice;

	DDRB = 0x00; 
  90:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF; 
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	85 b9       	out	0x05, r24	; 5

	DDRC = 0x00; 
  96:	17 b8       	out	0x07, r1	; 7
	PORTC = 0xFF;
  98:	88 b9       	out	0x08, r24	; 8

	DDRD = 0xFF; 
  9a:	8a b9       	out	0x0a, r24	; 10
	// PORTD = 0xFF;

	// DDRB = 0xFF; 
	while(1) { 
		indice = PINB & 0x3; 
  9c:	83 b1       	in	r24, 0x03	; 3
		switch(indice){ 
  9e:	83 70       	andi	r24, 0x03	; 3
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	19 f0       	breq	.+6      	; 0xaa <main+0x1a>
  a4:	82 30       	cpi	r24, 0x02	; 2
  a6:	c1 f0       	breq	.+48     	; 0xd8 <main+0x48>
  a8:	f9 cf       	rjmp	.-14     	; 0x9c <main+0xc>
			case 1: // leer de la EEPROM 
				direccion = PINC & 0b00000111;
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	87 70       	andi	r24, 0x07	; 7
  ae:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
				dato=eeprom_read_byte(direccion); 
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 a5 00 	call	0x14a	; 0x14a <eeprom_read_byte>
  b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	83 ed       	ldi	r24, 0xD3	; 211
  c0:	90 e3       	ldi	r25, 0x30	; 48
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x32>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x3c>
  cc:	00 00       	nop
				_delay_ms(1000); 
				PORTD = dato >> 1; 
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	86 95       	lsr	r24
  d4:	8b b9       	out	0x0b, r24	; 11
				break; 
  d6:	e2 cf       	rjmp	.-60     	; 0x9c <main+0xc>
			case 2: // escribir en la EEPROM 
				direccion = PINC & 0b00000111;
  d8:	86 b1       	in	r24, 0x06	; 6
  da:	87 70       	andi	r24, 0x07	; 7
  dc:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
				dato = PINC & 0b00111000; 
  e0:	66 b1       	in	r22, 0x06	; 6
  e2:	68 73       	andi	r22, 0x38	; 56
  e4:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
				eeprom_write_byte(direccion, dato); 
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 ad 00 	call	0x15a	; 0x15a <eeprom_write_byte>
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	83 ed       	ldi	r24, 0xD3	; 211
  f2:	90 e3       	ldi	r25, 0x30	; 48
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x64>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x6e>
  fe:	00 00       	nop
				_delay_ms(1000); 
				PORTD = EEDR >> 1; 
 100:	80 b5       	in	r24, 0x20	; 32
 102:	86 95       	lsr	r24
 104:	8b b9       	out	0x0b, r24	; 11
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	83 ed       	ldi	r24, 0xD3	; 211
 10a:	90 e3       	ldi	r25, 0x30	; 48
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x7c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x86>
 116:	00 00       	nop
				_delay_ms(1000); 
				PORTD = EEAR >> 1; 
 118:	81 b5       	in	r24, 0x21	; 33
 11a:	92 b5       	in	r25, 0x22	; 34
 11c:	96 95       	lsr	r25
 11e:	87 95       	ror	r24
 120:	8b b9       	out	0x0b, r24	; 11
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x98>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0xa2>
 132:	00 00       	nop
				_delay_ms(1000); 
				PORTD=0x00; 
 134:	1b b8       	out	0x0b, r1	; 11
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	83 ed       	ldi	r24, 0xD3	; 211
 13a:	90 e3       	ldi	r25, 0x30	; 48
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0xac>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xb6>
 146:	00 00       	nop
 148:	a9 cf       	rjmp	.-174    	; 0x9c <main+0xc>

0000014a <eeprom_read_byte>:
 14a:	f9 99       	sbic	0x1f, 1	; 31
 14c:	fe cf       	rjmp	.-4      	; 0x14a <eeprom_read_byte>
 14e:	92 bd       	out	0x22, r25	; 34
 150:	81 bd       	out	0x21, r24	; 33
 152:	f8 9a       	sbi	0x1f, 0	; 31
 154:	99 27       	eor	r25, r25
 156:	80 b5       	in	r24, 0x20	; 32
 158:	08 95       	ret

0000015a <eeprom_write_byte>:
 15a:	26 2f       	mov	r18, r22

0000015c <eeprom_write_r18>:
 15c:	f9 99       	sbic	0x1f, 1	; 31
 15e:	fe cf       	rjmp	.-4      	; 0x15c <eeprom_write_r18>
 160:	1f ba       	out	0x1f, r1	; 31
 162:	92 bd       	out	0x22, r25	; 34
 164:	81 bd       	out	0x21, r24	; 33
 166:	20 bd       	out	0x20, r18	; 32
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	fa 9a       	sbi	0x1f, 2	; 31
 16e:	f9 9a       	sbi	0x1f, 1	; 31
 170:	0f be       	out	0x3f, r0	; 63
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
